name: mac-actions-workflow
on: 
  push: 
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
      
jobs:
  xcode:
    runs-on: macos-latest
    steps:
      
#       - name: Do cache
#         id: my-cache
#         uses: actions/cache@v3
#         with:
#           path: dir-i-need-to-cache
#           key: my-cache-key

#       - name: This step is cached
#         if: steps.my-cache.outputs.cache-hit != 'true'
#         run: mkdir -p ./dir-i-need-to-cache && echo random-string > ./dir-i-need-to-cache/random-file-name.txt && echo "hi from cached step"
      
#      - run: brew install --cask anydesk
      - run: brew install --cask teamviewer
      
      - run: brew install tccutil
      
      - run: sudo tccutil --enable ScreenCapture com.teamviewer.desktop

#       - name: download and mount
#         run: aria2c https://google.com/dl/chrome-remote-desktop/chromeremotedesktophost-47.0.2526.18.dmg && hdiutil attach chromeremotedesktophost-47.0.2526.18.dmg
        
#       - name: install
#         run: cd "/Volumes/Chrome Remote Desktop Host 47.0.2526.18" && ls && sudo installer -pkg "Chrome Remote Desktop Host.pkg" -target /
        
#       - name: download and mount
#         run: aria2c https://download.anydesk.com/anydesk.dmg && hdiutil attach anydesk.dmg

#       - name: install
#         run: cd /Volumes/AnyDesk && ls && sudo cp -rf /Volumes/AnyDesk/AnyDesk.app /Applications
        
#      - run: sudo /Applications/AnyDesk.app/Contents/MacOS/AnyDesk &
      # - run: nohup /Applications/TeamViewer.app/Contents/MacOS/TeamViewer_Service -Module Full > TeamViewer.log 2>&1 &
      
      - run: /Applications/TeamViewer.app/Contents/MacOS/TeamViewer
      
      - run: osascript -e 'tell application "TeamViewer" to activate'
      
      - run: |
          tccSearchPair="kTCCServiceScreenCapture|com.teamViewer.TeamViewer"
          #Variables for dialog
          appName="TeamViewer"
          #App icon location
          appImage="/Applications/TeamViewer.app/Contents/Resources/AppIcon.icns"
          #Dialog to send user
          initialMessage="To properly support your machine, we need you to allow the Screen Recording option for $appName"
          #Second message screen for user to allow
          secondMessage="In the Security and Privacy window, please allow $appName by adding a checkmark to the left of it"


          function promptUser()
          {
          initialPrompt=$( /usr/bin/osascript -e "display dialog \"$initialMessage\" with title \"$appName Screen Sharing\" with icon file POSIX file \"$appImage\"  buttons {\"OK\"} default button {\"OK\"} giving up after 900" )

          theButton=$( echo "$initialPrompt" | /usr/bin/awk -F "button returned:|," '{print $2}' )


          if [ "$theButton" == "OK" ];
          then
            echo "Opening Screen Recording Privacy"
            #Open System Preferences > Security & Privacy > Screen Recording
            open "x-apple.systempreferences:com.apple.preference.security?Privacy_ScreenCapture"
            sleep 1
            #Prompt User with second dialog instructing them to enable app
            secondPrompt=$( /usr/bin/osascript -e "display dialog \"$secondMessage\" with title \"$appName Screen Sharing\" with icon file POSIX file \"$appImage\"  buttons {\"OK\"} default button {\"OK\"} giving up after 30" )
          else
            echo "Button OK not selected.  Exiting..."
            exit
          fi

          #Wait 60 seconds and report if screen recording has been enabled
          sleep 60
          secondCheck=$(/usr/bin/sqlite3 "/Library/Application Support/com.apple.TCC/TCC.db" 'SELECT service, client FROM access WHERE allowed = '0'')
          if [[ "$secondCheck" != *"$tccSearchPair"* ]]; then
            echo "User successfully enabled $appName"
          else
            echo "$appName is still disabled.  Exiting..."
            exit
          fi
          }

          #Check for disabled System TCC values
          disabledValues=$(/usr/bin/sqlite3 "/Library/Application Support/com.apple.TCC/TCC.db" 'SELECT service, client FROM access WHERE allowed = '0'')

          #Check if tccSearchPair matches a disabled TCC value on the user's machine
          if [[ "$disabledValues" == *"$tccSearchPair"* ]]; then
            #Run function to prompt user to enable
            promptUser
          else
            echo "$appName permission has already been enabled.  Exiting Script."
            exit
          fi
        
#       - name: run
#         run: sudo echo qwerty123 | sudo /Applications/AnyDesk.app/Contents/MacOS/AnyDesk --set-password &
        
      - run: screencapture ~/Desktop/picture.png # sudo /Applications/AnyDesk.app/Contents/MacOS/AnyDesk --get-id
        
#       - if: steps.my-cache.outputs.cache-hit != 'true'
#         run: launchctl start org.chromium.chromoting
      
#       - if: steps.my-cache.outputs.cache-hit != 'true'
#         run: launchctl bootout user/$(id -u "runner")
        
#       - run: cd /Applications && ls
      
      - name: Release prebuilt
        uses: ncipollo/release-action@v1
        with:
          artifacts: "~/Desktop/picture.png"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - uses: fastai/workflows/ssh@master
        with:
          ssh_key: ${{ secrets.SSH_KEY }}
          key_file: id_ecdsa
  # - uses: actions/checkout@v2
  # - run: source script-mac.sh
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v2
